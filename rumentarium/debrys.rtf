{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf480
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 RuLooperOLD\cf0  \{\
\
	\cf3 // a class for recording events \cf0 \
	\cf3 // you can overwrite events while it plays back\cf0 \
	\cf3 // events are generated by dataSender\cf0 \
	\cf3 // the datasender notifies to the logger\cf0 \
	\cf2 var\cf0  <>dataSender ;\
	\cf3 // arrays with a sequence of events. Where events are written down\cf0 \
	\cf2 var\cf0  <>history, <>lastState ;\
	\cf3 // dur is the max duration of an event stream in seconds\cf0 \
	\cf3 // to be stored in into history\cf0 \
	\cf3 // repeat is the number or repetitions\cf0 \
	\cf3 // timeout is the umber of repetitions after which the story is erased\cf0 \
	\cf3 // quant is a quantization for time\cf0 \
	\cf2 var\cf0  <>dur, <>repeat, <>timeout, <>quant ;\
	\cf3 // total time is the sum of deltas\cf0 \
	\cf2 var\cf0  <>totalTime ;\
	\cf3 // if dur.isInf all the stuff is progressively recored\cf0 \
	\cf3 // resettable start time, at each event is zeroed so we can calc delta\cf0 \
	\cf2 var\cf0  <>startTime ;\
	\cf2 var\cf0  <>player, <>looper ;\
	\cf2 var\cf0  <>active ; \cf3 // working or bypass\cf0 \
	\cf2 var\cf0  <>eventQueue ;\
	\
	\
	*new \{ \cf2 arg\cf0  dataSender, dur, repeat = \cf2 inf\cf0 , timeout = \cf2 inf\cf0 , quant = 0.1  ; \
		^\cf2 super\cf0 .new.initRuLooper(dataSender, dur, repeat, timeout, quant) \
	\}\
\
	initRuLooper \{ \cf2 arg\cf0  aDataSender, aDur, aRepeat, aTimeout, aQuant ;\
		dataSender = aDataSender ;\
		dur = aDur ;\
		timeout = aTimeout ;\
		repeat = aRepeat ;\
		quant = aQuant ;\
		aDataSender.addDependant(\cf2 this\cf0 ) ;\
		history = [] ; 	\
		lastState = [] ;\
		startTime = \cf2 thisThread\cf0 .seconds ;\
		totalTime = 0 ; \
		eventQueue = [] ;\
		\cf3 // it plays the history\cf0 \
		player = \cf2 Task\cf0 (\{\
			\cf2 var\cf0  delta, port, value ;\
			history.do(\{ \cf2 arg\cf0  event ;\
				if (event.notNil)\
					\{ # port, value, delta = event ;\
					delta.wait ;\
					\cf2 this\cf0 .recEvent(port, value) \
					\}\
					\{ (dur-quant).wait \}\
				\})\
		\}) ;\
		\cf3 // loops on the history\cf0 \
		looper = \cf2 Task\cf0 (\{\
			repeat.do(\{ \cf2 |time, times|\cf0 \
				(\cf4 "This is time"\cf0 +time).postln ;\
				player.reset.play ;\
				dur.wait ;\
				history = lastState ;\
				\cf3 // erase it\cf0 \
				lastState = [] ;\
				\cf3 // check for timeout\cf0 \
				if ( (times+1)%timeout == 0 )\
					\{ \cf4 "RESET HISTORY"\cf0 .postln; history = [] \} ;\
				\cf3 // reset time	\cf0 \
				totalTime = 0 ;\
				startTime = \cf2 thisThread\cf0 .seconds ;\
				player.stop\
				\}) ;\
			\cf4 "END"\cf0 .postln;\
		\}) ;\
		active = \cf2 true\cf0  ;\
	\}\
	\
	\cf3 // writes/reads to file\cf0 \
	writeHistory \{ \cf2 arg\cf0  pathname ; \
		history.writeArchive(pathname) ;\
	\}\
	readHistory \{  \cf2 arg\cf0  pathname ;\
		history = \cf2 Object\cf0 .readArchive(pathname)\
	\}\
	\
	\cf3 // interface to looper task	\cf0 \
	start \{\
		looper.play ;\
		active = \cf2 true\cf0  ;\
	\}\
\
	\cf3 // clean up all	\cf0 \
	resetAndStart \{ 	\
		history = [] ; 	 \
		lastState = [] ;\
		startTime = \cf2 thisThread\cf0 .seconds ;\
		totalTime = 0 ; \
		looper.reset.play ;\
		active = \cf2 true\cf0 \
 	\}\
	\
	stop \{ looper.stop ; player.stop ; active = \cf2 false\cf0  \}\
					\
	recEvent \{ \cf2 arg\cf0  port, value ;\
		\cf2 var\cf0  event, bkIndex ;\
		\cf3 // an event is a request for a value to a port\cf0 \
		\cf3 // an old Event stores the data. Useful for the future\cf0 \
		\cf2 var\cf0  previous, index ; \cf3 // use to search previous value for that beat\cf0 \
		\cf2 var\cf0  delta ; \cf3 // delta time\cf0 \
		\cf3 // how much time is passed from last event?\cf0 \
		delta = (\cf2 thisThread\cf0 .seconds-startTime).round(quant) ;\
		\cf3 // start is reset to now\cf0 \
		startTime = \cf2 thisThread\cf0 .seconds ;\
		\cf3 // add the past event\cf0 \
		event = [port, value, delta, totalTime] ;\
		previous = lastState.select(\{\cf2 |event, index|\cf0  [event[0]].add(event[3])==[port, totalTime]\})[0] ;\
		if ( previous.isNil ) \
			\cf3 // is the place in the quant grid free? Add event\cf0 \
			\{\
			lastState = lastState.add(event) ;\
			\}\
			\cf3 // is it already taken? Replace event\cf0 \
			\{\
				\cf3 //"Overwrite".postln ;\cf0 \
				index = lastState.indexOfEqual(previous).postln ;\
				previous.postln ;\
				event[2] = previous[2] ;\
				lastState[index] = event ;\
			\} ;\
		totalTime = totalTime + delta ; \
		\cf3 // in any case forward \cf0 \
		\cf2 this\cf0 .changed(\cf2 this\cf0 , event) ;\
	\}				\
					\
\
	\cf3 // Polling\cf0 \
		\
	poll \{ \cf2 arg\cf0  rate ;\
		\cf2 var\cf0  controlDataArr, oldArr = \cf2 Array\cf0 .fill(18, 0) ;\
		rate ? rate = quant ;\
		\cf2 Task\cf0 (\{\
			\cf2 inf\cf0 .do(\{\
				controlDataArr = \cf2 Array\cf0 .newFrom(dataSender.internal) ;\
				controlDataArr.do(\{ \cf2 arg\cf0  val, ind ;\
					if ( val != oldArr[ind] )\
						\{ \cf2 this\cf0 .recEvent(ind+1, val) \} \
				\}) ;\
				oldArr = \cf2 Array\cf0 .newFrom(dataSender.internal) ;\
				rate.wait ;	\
				\})\
		\}).play	\
	\}\
\
					\
	\cf3 // Dependance\cf0 \
	\cf3 // the controller change its state an notifies\cf0 \
	\cf3 // the controller can also directly use recEvent\cf0 \
	\cf3 // doesn't work properly: too many messages...\cf0 \
	update \{ \cf2 arg\cf0  theChanged, theChanger, more;\
		\cf2 var\cf0  last ;\
		if (active) \
			\cf3 // do the stuff\cf0 \
			\{ \
			\cf2 this\cf0 .recEvent(more[0], more[1]) \}\
			\cf3 // else simply forward \cf0 \
			\{ \cf2 this\cf0 .changed(\cf2 this\cf0 , more) \}\
	\}\
\
	gui \{ \cf2 arg\cf0  w = 500, h = 300 ;\
		\cf2 var\cf0  g = \cf2 RuLooperGUI\cf0 (\cf2 this\cf0 , dur, quant).width_(w).height_(h) ;\
		\cf2 this\cf0 .addDependant(g) ;\
		\}\
		\
	gui2 \{ \cf2 arg\cf0  rate , w = 500, h = 300 ;\
		\cf2 var\cf0  gui = \cf2 RuLooperGUI\cf0 (\cf2 this\cf0 , quant).width_(w).height_(h) ;\
		rate = rate ? dur ;\
		\cf2 Task\cf0 (\{\
			\cf2 inf\cf0 .do\{\
				if ( history != [] )\
					\{ gui.drawHistory(history) \} ;\
				rate.wait ;		\
			\}\
		\}).play\
	\}	\
		\
	drawHistory \{ \cf2 arg\cf0  w = 500, h = 300 ;\
		\cf2 RuLooperGUI\cf0 (\cf2 this\cf0 ).width_(w).height_(h).drawHistory(history) ;\
	\}	\
\
	drawHistorySched \{ \cf2 arg\cf0  rate = 0.25, w = 500, h = 300 ;\
		\cf2 RuLooperGUI\cf0 (\cf2 this\cf0 ).width_(w).height_(h).drawHistorySched(rate) ;\
	\}	\
		\
\}\
\
\
\
\
	drawHistory \{ \cf2 arg\cf0  history ;\
		\cf2 var\cf0  port, value, totalTime ;\
		\cf2 var\cf0  dur = looper.dur ;\
		quant = looper.quant ;\
		width = 500 ;\
		height = 300 ;\
		if (dur ==\cf2 inf\cf0 ) \{ dur = history.reverse[0].reverse[0]\} ;\
		numPix = ((dur/quant).asInteger) ;\
		source = \cf2 SCImage\cf0 .new(numPix, 18).scalesWhenResized_(\cf2 true\cf0 ).interpolation_(\cf5 'none'\cf0 ) ;\
		\cf3 // scale up\cf0 \
		source.setSize(width, height) ;\
		window = source.plot(showInfo:\cf2 false\cf0 ) ;\
\
		\{\
			history.do\{ \cf2 |ev|\cf0 \
				# port, value, totalTime = ev ;\
				\cf3 // back to the original\cf0 \
				source.setSize(numPix, 18) ;\
				value = 1-value ;\
				source.setPixel(([value, value, value, 1]*255).asRGBA, totalTime/quant, port-1) ;\
				\cf3 // scale up\cf0 \
				source.setSize(width, height);\
				window.refresh ;\
			\}\
		\}.defer\
	\}\
\cf3 /*	\
	update \{ arg theChanged, theChanger, more ;\
		var port, value, delta, totalTime ;\
		// is it an event?\
		if ( more.size==4 )\
			\{\
			\{\
			# port, value, delta, totalTime = more ;\
			// back to the original\
			source.setSize(numPix, 18) ;\
			value = 1-value ;\
			source.setPixel(([value, value, value, 1]*255).asRGBA, totalTime/quant, port) ;\
			// scale up\
			source.setSize(width, height) ;\
			window.refresh ;\
			\}.defer\
			\}\
		// too expensive, freezes with knobs\
	\}\
*/\cf0 \
\
	drawHistorySched \{ \cf2 arg\cf0  rate = 0.25 ;\
		\cf2 var\cf0  port, value, totalTime, i = 0 ;\
		\cf2 var\cf0  dur = looper.dur ;\
		\cf2 var\cf0  ev ;\
		\cf2 var\cf0  history = looper.history ;\
		quant = looper.quant ;\
		width = 500 ;\
		height = 300 ;\
		if (dur ==\cf2 inf\cf0 ) \{ dur = history.reverse[0].reverse[0]\} ;\
		numPix = ((dur/quant).asInteger) ;\
		source = \cf2 SCImage\cf0 .new(numPix, 18).scalesWhenResized_(\cf2 true\cf0 ).interpolation_(\cf5 'none'\cf0 ) ;\
		\cf3 // scale up\cf0 \
		source.setSize(width, height) ;\
		window = source.plot(showInfo:\cf2 false\cf0 ) ;\
\
		\cf2 Task\cf0 (\{\
			\cf2 inf\cf0 .do\{ \
				if ( looper.history != [] ) \{\{\
					ev = looper.history[i.min(looper.history.size-1)] ;\
					# port, value, totalTime = ev ;\
					\cf3 // back to the original\cf0 \
					source.setSize(numPix, 18) ;\
					value = 1-value ;\
					source.setPixel(([value, value, value, 1]*255).asRGBA, totalTime/quant, port-1) ;\
					\cf3 // scale up\cf0 \
					source.setSize(width, height);\
					window.refresh ;\
					i = i+1 ;\
					if ( i >= looper.history.size ) \{ i = 0 \} ;\
				\}.defer ;\
			\} ;\
			rate.wait ;\
		\}\}).play\
	\}}