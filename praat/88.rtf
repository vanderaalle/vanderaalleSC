{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5760\tx7200\ql\qnatural

\f0\fs18 \cf0 (\
\
\cf2 // Synthdefs\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // A generic source\cf0 \
\cf2 // can be replaced by anything\cf0 \
\cf3 SynthDef\cf0 (\cf4 "source88"\cf0 , \{ \cf3 arg\cf0  out = 0, bufnum, loop = -1;\
	\cf3 Out\cf0 .ar(out,\
		\cf3 PlayBuf\cf0 .ar(1, bufnum, \cf3 BufRateScale\cf0 .kr(bufnum), loop:loop)\
	)\
\}).send(s) ;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5760\tx7200\ql\qnatural
\cf0 \
\cf2 // test source\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 (\cf4 "testSource88"\cf0 , \{ \cf3 arg\cf0  out = 0, freq = 1000;\
	\cf3 Out\cf0 .ar(out,\
		\cf3 SinOsc\cf0 .ar\
	)\
\}).send(s) ;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5760\tx7200\ql\qnatural
\cf0 \
\
\
\cf2 // single filter\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 (\cf4 "filt88"\cf0 , \{ \cf3 arg\cf0  out = 0, freq = 100, q = 1, busIndex = 3, scale = 88    ;  \
	\cf3 Out\cf0 .ar(out, \cf3 BPF\cf0 .ar(\cf3 In\cf0 .ar(busIndex), freq, q)/scale )\
\}).send(s) ;\
\
\
\cf2 // a trigger reading from bus\cf0 \
\cf3 SynthDef\cf0 (\cf4 "trig88"\cf0 , \{ \cf3 arg\cf0  rate = 1.0, id = 0, busIndex = 3, dur ;  \
	\cf3 SendTrig\cf0 .kr(\cf3 Impulse\cf0 .kr(rate)*\cf3 Line\cf0 .kr(1,1, dur, doneAction:2), \
	\cf2 // OSCresp stops filling arr after dur\cf0 \
		 id, \cf3 In\cf0 .ar(busIndex)) ; \
\}).send(s) ;\
\
\
\cf2 // amp follower, to be polled\cf0 \
\cf3 SynthDef\cf0 (\cf4 "amp88"\cf0 , \{ \cf3 arg\cf0  out = 0, busIndex = 3, scale = 1 ;  \
	\cf3 Out\cf0 .kr(out, \cf3 Amplitude\cf0 .kr(\cf3 In\cf0 .ar(busIndex)*scale)) ; \
\}).send(s) ;\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5760\tx7200\ql\qnatural
\cf0 \
\cf2 // single filter\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf0 (\cf4 "player88"\cf0 , \{ \cf3 arg\cf0  out = 0, freq = 100,  ampScale = 1.0, busIndex = 3 ;  \
	\cf3 Out\cf0 .ar(out, \cf3 SinOsc\cf0 .ar(freq, 0, \cf3 In\cf0 .ar(busIndex))*ampScale )\
\}).send(s) ;\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5760\tx7200\ql\qnatural
\cf0 a = \cf3 Bus\cf0 .audio(s, 1);				\cf2 // the send\cf0 \
b = \cf3 Bus\cf0 .control(s, 1);				\cf2 // the send\cf0 \
c = \cf3 Buffer\cf0 .read(s, \cf4 "sounds/a11wlk01-44_1.aiff"\cf0 ); \cf2 // remember to free the buffer later.\cf0 \
\
)\
\
(\
s.recSampleFormat = \cf4 "int16"\cf0  ;\
s.recChannels = 1;\
s.prepareForRecord(\cf4 "recordings/audio1.aiff"\cf0 ) ;\
s.record ;\
\
)\
\
s.stopRecording ;\
\
(\
\
\cf2 // the freq array\cf0 \
\cf2 //var ~matrix ; 					// the 2D array\cf0 \
h = \cf3 Array\cf0 .series(88, 21).midicps ; 		\cf2 // frequencies array\cf0 \
~matrix = \cf3 Array\cf0 .fill(h.size,\{\cf3 Array\cf0 .new\}) ; 	\cf2 // available arrays to be filled\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 d = c.numFrames/44100;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5760\tx7200\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // register to receive this message\cf0 \
\cf3 OSCresponder\cf0 (s.addr,\cf5 '/tr'\cf0 ,\{ \cf3 arg\cf0  time, responder, msg;\
	\cf2 //[time,responder,msg].postln; \cf0 \
	~matrix[msg[2]] = ~matrix[msg[2]].add(msg[3]) ;\
	\cf2 //if (msg[2]==999, \{ a = a.add(msg[3])\}) ;\cf0 \
\}).add;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5760\tx7200\ql\qnatural
\cf0 \
\cf2 // the source\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5760\tx7200\ql\qnatural
\cf3 // Synth\cf0 (\cf4 "source88"\cf0 , [\cf5 \\out\cf0 , a.index, \cf5 \\bufnum\cf0 , c.bufnum, \cf5 \\numFrames\cf0 , c.numFrames ] ) ;\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5760\tx7200\ql\qnatural
\cf2 // the test source\cf0 \
\cf2 Synth("testSource88", [\\out, a.index,\\freq, 4000] ) ;\cf0 \
\
\
\cf2 // polled filter bank\cf0 \
\
\
h.do(\{ \cf3 arg\cf0  item, index ; \
	\cf3 Synth\cf0 .tail(\cf3 nil\cf0 , \cf4 "filt88"\cf0 , [\cf5 \\busIndex\cf0 , a.index, \cf5 \\out\cf0 , 0, \cf5 \\freq\cf0 , item, \cf5 \\q\cf0 , 0.01, \cf5 \\scale\cf0 , 1]) ;\
	\cf3 Synth\cf0 .tail(\cf3 nil\cf0 , \cf4 "amp88"\cf0 , [\cf5 \\busIndex\cf0 , 0, \cf5 \\out\cf0 , b.index, \cf5 \\scale\cf0 , 10000]) ;\
	\cf3 Synth\cf0 .tail(\cf3 nil\cf0 , \cf4 "trig88"\cf0 , [\cf5 \\busIndex\cf0 , b.index, \cf5 \\id\cf0 , index, \cf5 \\dur\cf0 , d*2, \cf5 \\rate\cf0 , 10]) ;\
\})\
\
\
\cf2 /*\
// 100 Hz sinusoidal test\
h.do(\{ arg item, index ; \
	Synth.tail(nil, "filt88", [\\busIndex, b.index, \\out, 0, \\freq, item, \\q, 0.000001] ) ;\
	Synth.tail(nil, "trig88", [\\busIndex, 0, \\id, index, \\dur, 5, \\rate, 20] ) ;\
\})\
*/\cf0 \
\
\
\
\cf2 /*\
// The Sinusoidal Player Piano\
\
h.do(\{ arg item, index ; \
	Synth.tail(nil, "filt88", [\\busIndex, a.index, \\out, 10, \\freq, item, \\q, 0.01] ) ;\
	Synth.tail(nil, "player88", [\\busIndex, 10, \\out, 0, \\id, index, \\dur, d, \\ampScale, 1] ) ;\
\})\
*/\cf0 \
\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 ~matrix.size ;\
\
~matrix.do(\{ \cf3 arg\cf0  i; i.size.postln\}) ;\
~matrixOld = ~matrix ;\
\
~matrix = ~matrix.flat.normalize.clump(~matrix[0].size)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5760\tx7200\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 ~matrix[20..30].flop.flat.plot2(range:[-1,1],numChannels:10)\
\
\
m = \cf3 MelFilter\cf0 .new ;\
m.pitchFilter = ~matrix.flop ;\
\
m.pitchFilter.jFilter(6,6) ;\
\
m.pitchFilter[0].size}