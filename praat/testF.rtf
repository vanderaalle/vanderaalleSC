{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red96\green96\blue96;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 (\
f = \cf3 SoundFile\cf2 .new;\
\cf4 //f.openRead("sounds/a11wlk01-44_1.aiff");\cf2 \
f.openRead(\cf5 "sounds/sofon.wav"\cf2 );\
\
p = f.asPraat ;\
\cf4 //p.createFormant ;\cf2 \
p.exportFormant ;\
p.exportPitchContour\
)\
\
\
(\
f = \{\cf3 SinOsc\cf2 .ar\}.fillData ;\
p = f.asPraat ;\
p.createFormant ;\
p.exportFormant\
\
)\
\
p.open\
\
i = 0 ;\
while \{i != a.size\} \{intensity = a[i] ; nF = a[i+1], couples = a[i+2..i+2+(nf*2)]; i = i+2+(nf*2)\}\
\
\
p = \cf3 Praat\cf2 .new.importFormant.importPitchContour\
\
p.intensityList\
p.freqList\
p.nx\
p.jFormant \
\
\
p.jPaint(formantList:[2,3])\
p.jPaint(formantList:[0])\
p.jPaint(stepX:5)\
p.jPaint\
\
\
\
(\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5760\tx7200\ql\qnatural
\cf4 // sinusoide\cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf2 (\cf5 "sine"\cf2 , \{ \cf3 arg\cf2  out = 0, freq = 100,  amp = 0.1 ;  \
	\cf3 Out\cf2 .ar(out, \
		\cf3 SinOsc\cf2 .ar(freq, 0, amp)*\
		\cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc, doneAction:2)\
		)\
\}).send(s) ;\
\
\
)\
\
(\
\cf4 // brutal force sampling\cf2 \
l = [] ;\
s = 7; \cf4 //every s\cf2 \
forBy(0, p.freqList.size-1, s, \{\cf3 arg\cf2  i; l = l.add(p.freqList[i])\}) ;\
l.size ;\
p.freqList = l ;\
)\
\
\cf4 // octave down\cf2 \
p.freqList = p.freqList*0.5 ;\
p.freqList.do(\{\cf3 arg\cf2  i ; i[0].cpsmidi.round.postln\});\
\
(\
\cf4 // Additive\cf2 \
r = \cf3 Routine\cf2 (\{ \
	p.freqList.do(\{ \cf3 arg\cf2  frame, item;\
			\cf3 var\cf2  amp = p.intensityList[item];\
			frame.do(\{ \cf3 arg\cf2  freq ;\
				freq = freq.cpsmidi.round.midicps ; \cf4 // rounded to semitone\cf2 \
				\cf3 Synth\cf2 (\cf5 "sine"\cf2 , [\cf6 \\freq\cf2 , freq, \cf6 \\amp\cf2 , amp*2]);\
				\}) ;\
			0.25.wait;\
		\}) ;\
\}) ;\
\
\cf3 SystemClock\cf2 .play(r) ;\
)\
\
\
(\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5760\tx7200\ql\qnatural
\cf4 // filterbank\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf2 (\cf5 "bpfPulse"\cf2 , \{ \cf3 arg\cf2  out = 0, freq = 100, bw = 1, amp = 0.1 ;  \
	\cf3 Out\cf2 .ar(out, \
		\cf3 BPF\cf2 .ar(\cf3 Pulse\cf2 .ar(freq), freq, bw/freq, amp)*\
		\cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc, doneAction:2)\
		)\
\}).send(s) ;\
\
)\
\
(\
\cf4 // Subtractive\cf2 \
r = \cf3 Routine\cf2 (\{ \
	p.freqList.do(\{ \cf3 arg\cf2  frame, item;\
			\cf3 var\cf2  amp = p.intensityList[item];\
			frame.do(\{ \cf3 arg\cf2  freq, ind ;\
				\cf3 var\cf2  bw = p.bwList[item][ind] ;\
				\cf3 Synth\cf2 (\cf5 "bpfWN"\cf2 , [\cf6 \\freq\cf2 , freq, \cf6 \\bw\cf2 , bw*0.01, \cf6 \\amp\cf2 , amp*25]);\
				\}) ;\
			0.05.wait;\
		\}) ;\
\}) ;\
\
\cf3 SystemClock\cf2 .play(r) ;\
)\
\
\
(\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5760\tx7200\ql\qnatural
\cf4 // filterbank\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 SynthDef\cf2 (\cf5 "bpfPulse"\cf2 , \{ \cf3 arg\cf2  out = 0, freq = 100, bw = 1, amp = 0.1 ;  \
	\cf3 Out\cf2 .ar(out, \
		\cf3 BPF\cf2 .ar(\cf3 WhiteNoise\cf2 .ar, freq, bw/freq, amp)*\
		\cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc, doneAction:2)\
		)\
\}).send(s) ;\
)\
\
(\
\cf4 // Subtractive\cf2 \
r = \cf3 Routine\cf2 (\{ \
	p.freqList.do(\{ \cf3 arg\cf2  frame, item;\
			\cf3 var\cf2  amp = p.intensityList[item];\
			frame.do(\{ \cf3 arg\cf2  freq, ind ;\
				\cf3 var\cf2  bw = p.bwList[item][ind] ;\
				\cf3 Synth\cf2 (\cf5 "bpfWN"\cf2 , [\cf6 \\freq\cf2 , freq, \cf6 \\bw\cf2 , bw*0.01, \cf6 \\amp\cf2 , amp*2]);\
				\}) ;\
			0.15.wait;\
		\}) ;\
\}) ;\
\
\cf3 SystemClock\cf2 .play(r) ;\
)\
\
p = \cf3 Praat\cf2 .new.importFormant ;\
p = \cf3 Praat\cf2 .new.importPitchContour ;\
p.jFormant\
p.pitchContour\
p.jPitchContour(0.4, 4, 500)\
\
\cf4 //\cf2 \
\
(\
\cf4 // deleting low freqs and transposing down 1 octave\cf2 \
\cf3 var\cf2  newFreqList ;\
p.freqList.do(\{\
	\cf3 arg\cf2  frame ;\
	\cf3 var\cf2  newFrame ;\
	if ( frame.size > 4, \{newFrame = frame[1..]\}, \{newFrame = frame\}) ;\
	newFreqList = newFreqList.add(newFrame) ;\
\}) ;\
\
p.freqList = newFreqList ;\
p.freqList = p.freqList*0.5 ;\
 \
)\
\
\
\
p.pitchContour = p.pitchContour*2 \
(\
\cf4 // brutal force sampling\cf2 \
l = [] ;\
s = 4; \cf4 //every s\cf2 \
forBy(0, p.pitchContour.size-1, s, \{\cf3 arg\cf2  i; l = l.add(p.pitchContour[i])\}) ;\
l.size ;\
p.pitchContour = l ;\
)\
\
p.pitchContour.size\
\
\
k = [440, 678, 555, 880]\
\
l = \cf3 LilyPond\cf2 .new.notateFormant(p) ;\
l = \cf3 LilyPond\cf2 .new.notateChord([440, 460, 589, 768]) ;\
l = \cf3 LilyPond\cf2 .new.notate(p.pitchContour)\
l = \cf3 LilyPond\cf2 .new.open\
\
k.cpsmidi.midinote\
\
\
p.freqList.size\
\
t = [] ;\
p.freqList.do(\{ \cf3 arg\cf2  i ;\
t = t.add(i[0..1])\
\})\
\
t\
p.pitchContour.cpsmidi.midinote.do(\{arg i; i.postln\})\
\
\
p.pitchContour.asSet.asArray.sort[1]\
\
\
d = 0.05 ;\
r = \cf3 ArrayPlayer\cf2 .new(t, d*(p.pitchContour.size/p.freqList.size)) ;\
s = \cf3 ArrayPlayer\cf2 .new(p.pitchContour, d) ;\
\
(\
r.play ;\
s.play ;\
)\
\
r = \cf3 ArrayPlayer\cf2 .new([[100, 200, 1000], [400, 3000, 5000], 0.5])\
\
(\
\cf4 // Additive\cf2 \
r = \cf3 Routine\cf2 (\{ \
	p.pitchContour.clump(1).do(\{ \cf3 arg\cf2  frame, item;\
			frame.do(\{ \cf3 arg\cf2  freq ;\
				freq.postln ;\
				freq = freq.cpsmidi.round(0.5).midicps ; \cf4 // rounded to semitone\cf2 \
				\cf3 Synth\cf2 (\cf5 "sine"\cf2 , [\cf6 \\freq\cf2 , freq]);\
				\}) ;\
			0.125.wait;\
		\}) ;\
\}) ;\
\
\cf3 SystemClock\cf2 .play(r) ;\
)\
\
\
\
}